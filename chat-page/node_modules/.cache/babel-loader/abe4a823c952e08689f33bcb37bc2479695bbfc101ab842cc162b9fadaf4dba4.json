{"ast":null,"code":"var _jsxFileName = \"/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// URL du serveur socket.io\nconst SOCKET_URL = 'http://localhost:5001';\nlet socket;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Récupérer l'utilisateur à partir du localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      setCurrentUser(user);\n\n      // Initialiser la connexion socket\n      initializeSocket();\n    }\n    setLoading(false);\n  }, []);\n\n  // Fonction pour initialiser la connexion socket\n  const initializeSocket = () => {\n    if (!socket) {\n      try {\n        socket = io(SOCKET_URL);\n        socket.on('connect', () => {\n          console.log('Socket connecté dans AuthContext:', socket.id);\n        });\n        socket.on('connect_error', err => {\n          console.error('Erreur de connexion socket dans AuthContext:', err);\n        });\n      } catch (err) {\n        console.error('Erreur lors de l\\'initialisation du socket:', err);\n      }\n    }\n  };\n  const registerUser = async (username, email, password) => {\n    try {\n      setError(null);\n      console.log('Tentative d\\'inscription avec:', {\n        username,\n        email\n      });\n\n      // Vérifier si l'utilisateur existe déjà dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const userExists = existingUsers.some(user => user.email === email || user.username === username);\n      if (userExists) {\n        console.error('Utilisateur déjà existant');\n        throw new Error('Un utilisateur avec cet email ou ce nom d\\'utilisateur existe déjà.');\n      }\n\n      // Créer un nouvel utilisateur - version simplifiée sans dépendre du socket\n      const newUser = {\n        id: 'user_' + Date.now().toString(),\n        username,\n        email,\n        password,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n\n      // Ajouter l'utilisateur à la liste des utilisateurs\n      existingUsers.push(newUser);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n\n      // Stocker l'utilisateur courant sans le mot de passe\n      const userWithoutPassword = {\n        ...newUser\n      };\n      delete userWithoutPassword.password;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', newUser.token);\n      console.log('Inscription réussie:', username);\n\n      // Initialiser la connexion socket après inscription\n      initializeSocket();\n\n      // Si le socket est connecté, enregistrer l'utilisateur sur le serveur\n      if (socket && socket.connected) {\n        socket.emit('register', userWithoutPassword);\n      } else {\n        console.log('Socket non connecté, inscription uniquement en local');\n      }\n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Erreur d\\'inscription détaillée:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n  const loginUser = async (email, password) => {\n    try {\n      setError(null);\n      console.log('Tentative de connexion avec:', email);\n\n      // Vérifier les identifiants dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const user = existingUsers.find(user => user.email === email && user.password === password);\n      if (!user) {\n        console.error('Identifiants incorrects');\n        throw new Error('Email ou mot de passe incorrect.');\n      }\n\n      // Préparer l'utilisateur pour le stockage (sans mot de passe)\n      const userWithoutPassword = {\n        ...user\n      };\n      delete userWithoutPassword.password;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      console.log('Connexion réussie:', user.username);\n\n      // Initialiser la connexion socket après connexion\n      initializeSocket();\n\n      // Si le socket est connecté, enregistrer l'utilisateur sur le serveur\n      if (socket && socket.connected) {\n        socket.emit('register', userWithoutPassword);\n      } else {\n        console.log('Socket non connecté, connexion uniquement en local');\n      }\n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Erreur de connexion détaillée:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n  const logoutUser = () => {\n    console.log('Déconnexion...');\n\n    // Déconnecter le socket\n    if (socket) {\n      socket.disconnect();\n      socket = null;\n    }\n\n    // Effacer les données de l'utilisateur\n    setCurrentUser(null);\n\n    // Nettoyage complet du localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    console.log('Déconnexion terminée');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      error,\n      registerUser,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","AuthContext","SOCKET_URL","socket","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","user","JSON","parse","localStorage","getItem","initializeSocket","on","console","log","id","err","registerUser","username","email","password","existingUsers","userExists","some","Error","newUser","Date","now","toString","token","push","setItem","stringify","userWithoutPassword","connected","emit","message","loginUser","find","logoutUser","disconnect","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nexport const AuthContext = createContext();\n\n// URL du serveur socket.io\nconst SOCKET_URL = 'http://localhost:5001';\nlet socket;\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Récupérer l'utilisateur à partir du localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      setCurrentUser(user);\n      \n      // Initialiser la connexion socket\n      initializeSocket();\n    }\n    setLoading(false);\n  }, []);\n\n  // Fonction pour initialiser la connexion socket\n  const initializeSocket = () => {\n    if (!socket) {\n      try {\n        socket = io(SOCKET_URL);\n        \n        socket.on('connect', () => {\n          console.log('Socket connecté dans AuthContext:', socket.id);\n        });\n        \n        socket.on('connect_error', (err) => {\n          console.error('Erreur de connexion socket dans AuthContext:', err);\n        });\n      } catch (err) {\n        console.error('Erreur lors de l\\'initialisation du socket:', err);\n      }\n    }\n  };\n\n  const registerUser = async (username, email, password) => {\n    try {\n      setError(null);\n      console.log('Tentative d\\'inscription avec:', { username, email });\n      \n      // Vérifier si l'utilisateur existe déjà dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const userExists = existingUsers.some(\n        user => user.email === email || user.username === username\n      );\n      \n      if (userExists) {\n        console.error('Utilisateur déjà existant');\n        throw new Error('Un utilisateur avec cet email ou ce nom d\\'utilisateur existe déjà.');\n      }\n      \n      // Créer un nouvel utilisateur - version simplifiée sans dépendre du socket\n      const newUser = {\n        id: 'user_' + Date.now().toString(),\n        username,\n        email,\n        password,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n      \n      // Ajouter l'utilisateur à la liste des utilisateurs\n      existingUsers.push(newUser);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n      \n      // Stocker l'utilisateur courant sans le mot de passe\n      const userWithoutPassword = { ...newUser };\n      delete userWithoutPassword.password;\n      \n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', newUser.token);\n      \n      console.log('Inscription réussie:', username);\n      \n      // Initialiser la connexion socket après inscription\n      initializeSocket();\n      \n      // Si le socket est connecté, enregistrer l'utilisateur sur le serveur\n      if (socket && socket.connected) {\n        socket.emit('register', userWithoutPassword);\n      } else {\n        console.log('Socket non connecté, inscription uniquement en local');\n      }\n      \n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Erreur d\\'inscription détaillée:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n\n  const loginUser = async (email, password) => {\n    try {\n      setError(null);\n      console.log('Tentative de connexion avec:', email);\n      \n      // Vérifier les identifiants dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const user = existingUsers.find(user => user.email === email && user.password === password);\n      \n      if (!user) {\n        console.error('Identifiants incorrects');\n        throw new Error('Email ou mot de passe incorrect.');\n      }\n      \n      // Préparer l'utilisateur pour le stockage (sans mot de passe)\n      const userWithoutPassword = { ...user };\n      delete userWithoutPassword.password;\n      \n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      \n      console.log('Connexion réussie:', user.username);\n      \n      // Initialiser la connexion socket après connexion\n      initializeSocket();\n      \n      // Si le socket est connecté, enregistrer l'utilisateur sur le serveur\n      if (socket && socket.connected) {\n        socket.emit('register', userWithoutPassword);\n      } else {\n        console.log('Socket non connecté, connexion uniquement en local');\n      }\n      \n      return userWithoutPassword;\n    } catch (error) {\n      console.error('Erreur de connexion détaillée:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n\n  const logoutUser = () => {\n    console.log('Déconnexion...');\n    \n    // Déconnecter le socket\n    if (socket) {\n      socket.disconnect();\n      socket = null;\n    }\n    \n    // Effacer les données de l'utilisateur\n    setCurrentUser(null);\n    \n    // Nettoyage complet du localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    \n    console.log('Déconnexion terminée');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        loading,\n        error,\n        registerUser,\n        loginUser,\n        logoutUser\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMO,UAAU,GAAG,uBAAuB;AAC1C,IAAIC,MAAM;AAEV,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,IAAIJ,IAAI,EAAE;MACRL,cAAc,CAACK,IAAI,CAAC;;MAEpB;MACAK,gBAAgB,CAAC,CAAC;IACpB;IACAR,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACf,MAAM,EAAE;MACX,IAAI;QACFA,MAAM,GAAGL,EAAE,CAACI,UAAU,CAAC;QAEvBC,MAAM,CAACgB,EAAE,CAAC,SAAS,EAAE,MAAM;UACzBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAElB,MAAM,CAACmB,EAAE,CAAC;QAC7D,CAAC,CAAC;QAEFnB,MAAM,CAACgB,EAAE,CAAC,eAAe,EAAGI,GAAG,IAAK;UAClCH,OAAO,CAACT,KAAK,CAAC,8CAA8C,EAAEY,GAAG,CAAC;QACpE,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;QACZH,OAAO,CAACT,KAAK,CAAC,6CAA6C,EAAEY,GAAG,CAAC;MACnE;IACF;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IACxD,IAAI;MACFf,QAAQ,CAAC,IAAI,CAAC;MACdQ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAAEI,QAAQ;QAAEC;MAAM,CAAC,CAAC;;MAElE;MACA,MAAME,aAAa,GAAGd,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;MACrE,MAAMY,UAAU,GAAGD,aAAa,CAACE,IAAI,CACnCjB,IAAI,IAAIA,IAAI,CAACa,KAAK,KAAKA,KAAK,IAAIb,IAAI,CAACY,QAAQ,KAAKA,QACpD,CAAC;MAED,IAAII,UAAU,EAAE;QACdT,OAAO,CAACT,KAAK,CAAC,2BAA2B,CAAC;QAC1C,MAAM,IAAIoB,KAAK,CAAC,qEAAqE,CAAC;MACxF;;MAEA;MACA,MAAMC,OAAO,GAAG;QACdV,EAAE,EAAE,OAAO,GAAGW,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACnCV,QAAQ;QACRC,KAAK;QACLC,QAAQ;QACRS,KAAK,EAAE,iBAAiB,GAAGH,IAAI,CAACC,GAAG,CAAC;MACtC,CAAC;;MAED;MACAN,aAAa,CAACS,IAAI,CAACL,OAAO,CAAC;MAC3BhB,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAExB,IAAI,CAACyB,SAAS,CAACX,aAAa,CAAC,CAAC;;MAE5D;MACA,MAAMY,mBAAmB,GAAG;QAAE,GAAGR;MAAQ,CAAC;MAC1C,OAAOQ,mBAAmB,CAACb,QAAQ;MAEnCnB,cAAc,CAACgC,mBAAmB,CAAC;MACnCxB,YAAY,CAACsB,OAAO,CAAC,MAAM,EAAExB,IAAI,CAACyB,SAAS,CAACC,mBAAmB,CAAC,CAAC;MACjExB,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAEN,OAAO,CAACI,KAAK,CAAC;MAE5ChB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEI,QAAQ,CAAC;;MAE7C;MACAP,gBAAgB,CAAC,CAAC;;MAElB;MACA,IAAIf,MAAM,IAAIA,MAAM,CAACsC,SAAS,EAAE;QAC9BtC,MAAM,CAACuC,IAAI,CAAC,UAAU,EAAEF,mBAAmB,CAAC;MAC9C,CAAC,MAAM;QACLpB,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACrE;MAEA,OAAOmB,mBAAmB;IAC5B,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDC,QAAQ,CAACD,KAAK,CAACgC,OAAO,CAAC;MACvB,MAAMhC,KAAK;IACb;EACF,CAAC;EAED,MAAMiC,SAAS,GAAG,MAAAA,CAAOlB,KAAK,EAAEC,QAAQ,KAAK;IAC3C,IAAI;MACFf,QAAQ,CAAC,IAAI,CAAC;MACdQ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEK,KAAK,CAAC;;MAElD;MACA,MAAME,aAAa,GAAGd,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;MACrE,MAAMJ,IAAI,GAAGe,aAAa,CAACiB,IAAI,CAAChC,IAAI,IAAIA,IAAI,CAACa,KAAK,KAAKA,KAAK,IAAIb,IAAI,CAACc,QAAQ,KAAKA,QAAQ,CAAC;MAE3F,IAAI,CAACd,IAAI,EAAE;QACTO,OAAO,CAACT,KAAK,CAAC,yBAAyB,CAAC;QACxC,MAAM,IAAIoB,KAAK,CAAC,kCAAkC,CAAC;MACrD;;MAEA;MACA,MAAMS,mBAAmB,GAAG;QAAE,GAAG3B;MAAK,CAAC;MACvC,OAAO2B,mBAAmB,CAACb,QAAQ;MAEnCnB,cAAc,CAACgC,mBAAmB,CAAC;MACnCxB,YAAY,CAACsB,OAAO,CAAC,MAAM,EAAExB,IAAI,CAACyB,SAAS,CAACC,mBAAmB,CAAC,CAAC;MACjExB,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAEzB,IAAI,CAACuB,KAAK,CAAC;MAEzChB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAER,IAAI,CAACY,QAAQ,CAAC;;MAEhD;MACAP,gBAAgB,CAAC,CAAC;;MAElB;MACA,IAAIf,MAAM,IAAIA,MAAM,CAACsC,SAAS,EAAE;QAC9BtC,MAAM,CAACuC,IAAI,CAAC,UAAU,EAAEF,mBAAmB,CAAC;MAC9C,CAAC,MAAM;QACLpB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACnE;MAEA,OAAOmB,mBAAmB;IAC5B,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDC,QAAQ,CAACD,KAAK,CAACgC,OAAO,CAAC;MACvB,MAAMhC,KAAK;IACb;EACF,CAAC;EAED,MAAMmC,UAAU,GAAGA,CAAA,KAAM;IACvB1B,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;IACA,IAAIlB,MAAM,EAAE;MACVA,MAAM,CAAC4C,UAAU,CAAC,CAAC;MACnB5C,MAAM,GAAG,IAAI;IACf;;IAEA;IACAK,cAAc,CAAC,IAAI,CAAC;;IAEpB;IACAQ,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;IAC/BhC,YAAY,CAACgC,UAAU,CAAC,OAAO,CAAC;IAEhC5B,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACrC,CAAC;EAED,oBACErB,OAAA,CAACC,WAAW,CAACgD,QAAQ;IACnBC,KAAK,EAAE;MACL3C,WAAW;MACXE,OAAO;MACPE,KAAK;MACLa,YAAY;MACZoB,SAAS;MACTE;IACF,CAAE;IAAAzC,QAAA,EAEDA;EAAQ;IAAA8C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChD,EAAA,CAxKWF,YAAY;AAAAmD,EAAA,GAAZnD,YAAY;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}