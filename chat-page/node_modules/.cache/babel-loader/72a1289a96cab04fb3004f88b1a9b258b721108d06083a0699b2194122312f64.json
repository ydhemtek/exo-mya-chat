{"ast":null,"code":"var _jsxFileName = \"/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/ChatContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Simuler des utilisateurs en ligne\n  useEffect(() => {\n    if (currentUser) {\n      // Exemple d'utilisateurs en ligne\n      const mockOnlineUsers = [{\n        id: 'user1',\n        username: 'alice'\n      }, {\n        id: 'user2',\n        username: 'bob'\n      }, {\n        id: 'user3',\n        username: 'charlie'\n      }].filter(user => user.id !== currentUser.id);\n      setOnlineUsers(mockOnlineUsers);\n    }\n  }, [currentUser]);\n\n  // Charger des messages exemple quand un utilisateur est sélectionné\n  useEffect(() => {\n    if (selectedUser) {\n      fetchMessages(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  // Fonction simulée pour récupérer les utilisateurs\n  const fetchUsers = async () => {\n    try {\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Exemple d'utilisateurs\n      const mockUsers = [{\n        id: 'user1',\n        username: 'alice'\n      }, {\n        id: 'user2',\n        username: 'bob'\n      }, {\n        id: 'user3',\n        username: 'charlie'\n      }, {\n        id: 'user4',\n        username: 'david'\n      }, {\n        id: 'user5',\n        username: 'emma'\n      }].filter(user => user.id !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n      return mockUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  };\n\n  // Fonction simulée pour récupérer les messages\n  const fetchMessages = async userId => {\n    try {\n      setLoading(true);\n\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Messages exemple\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 3600000);\n      const twoHoursAgo = new Date(now.getTime() - 7200000);\n      const mockMessages = [{\n        id: 'm1',\n        sender: userId,\n        receiver: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n        content: 'Salut ! Comment ça va ?',\n        timestamp: twoHoursAgo.toISOString(),\n        status: 'read',\n        reactions: []\n      }, {\n        id: 'm2',\n        sender: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n        receiver: userId,\n        content: 'Ça va bien, merci ! Et toi ?',\n        timestamp: oneHourAgo.toISOString(),\n        status: 'read',\n        reactions: [{\n          userId,\n          reaction: '👍',\n          timestamp: oneHourAgo.toISOString()\n        }]\n      }, {\n        id: 'm3',\n        sender: userId,\n        receiver: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n        content: 'Très bien ! Tu travailles sur quoi en ce moment ?',\n        timestamp: now.toISOString(),\n        status: 'delivered',\n        reactions: []\n      }];\n      setMessages(mockMessages);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n\n  // Envoyer un message\n  const handleSendMessage = async content => {\n    if (!selectedUser || !currentUser) return;\n    try {\n      const newMessage = {\n        id: `m${Date.now()}`,\n        sender: currentUser.id,\n        receiver: selectedUser.id,\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sent',\n        reactions: []\n      };\n\n      // Ajouter le message localement\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Mettre à jour le statut (simulé)\n      setTimeout(() => {\n        setMessages(prevMessages => prevMessages.map(msg => msg.id === newMessage.id ? {\n          ...msg,\n          status: 'delivered'\n        } : msg));\n      }, 1000);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  // Ajouter une réaction\n  const handleAddReaction = async (messageId, reaction) => {\n    try {\n      // Mettre à jour localement\n      setMessages(prevMessages => prevMessages.map(msg => msg.id === messageId ? {\n        ...msg,\n        reactions: [...(msg.reactions || []), {\n          userId: currentUser === null || currentUser === void 0 ? void 0 : currentUser.id,\n          reaction\n        }]\n      } : msg));\n\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error('Error adding reaction:', error);\n    }\n  };\n\n  // Répondre à un message\n  const handleReplyToMessage = async (messageId, content) => {\n    try {\n      if (!currentUser || !selectedUser) return;\n      const parentMessage = messages.find(msg => msg.id === messageId);\n      if (!parentMessage) return;\n      const reply = {\n        id: `m${Date.now()}`,\n        sender: currentUser.id,\n        receiver: selectedUser.id,\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sent',\n        parentId: messageId,\n        parentMessage: {\n          id: parentMessage.id,\n          content: parentMessage.content\n        }\n      };\n\n      // Mettre à jour localement\n      setMessages(prevMessages => [...prevMessages, reply]);\n\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n    } catch (error) {\n      console.error('Error replying to message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      onlineUsers,\n      fetchUsers,\n      selectedUser,\n      setSelectedUser,\n      messages,\n      loading,\n      handleSendMessage,\n      handleAddReaction,\n      handleReplyToMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"3jqZdAP1PW+qzjh70pc+gLlSIq4=\");\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","currentUser","onlineUsers","setOnlineUsers","selectedUser","setSelectedUser","messages","setMessages","loading","setLoading","mockOnlineUsers","id","username","filter","user","fetchMessages","fetchUsers","Promise","resolve","setTimeout","mockUsers","error","console","userId","now","Date","oneHourAgo","getTime","twoHoursAgo","mockMessages","sender","receiver","content","timestamp","toISOString","status","reactions","reaction","handleSendMessage","newMessage","prevMessages","map","msg","handleAddReaction","messageId","handleReplyToMessage","parentMessage","find","reply","parentId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { AuthContext } from './AuthContext';\n\nexport const ChatContext = createContext();\n\nexport const ChatProvider = ({ children }) => {\n  const { currentUser } = useContext(AuthContext);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Simuler des utilisateurs en ligne\n  useEffect(() => {\n    if (currentUser) {\n      // Exemple d'utilisateurs en ligne\n      const mockOnlineUsers = [\n        { id: 'user1', username: 'alice' },\n        { id: 'user2', username: 'bob' },\n        { id: 'user3', username: 'charlie' }\n      ].filter(user => user.id !== currentUser.id);\n      \n      setOnlineUsers(mockOnlineUsers);\n    }\n  }, [currentUser]);\n\n  // Charger des messages exemple quand un utilisateur est sélectionné\n  useEffect(() => {\n    if (selectedUser) {\n      fetchMessages(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  // Fonction simulée pour récupérer les utilisateurs\n  const fetchUsers = async () => {\n    try {\n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Exemple d'utilisateurs\n      const mockUsers = [\n        { id: 'user1', username: 'alice' },\n        { id: 'user2', username: 'bob' },\n        { id: 'user3', username: 'charlie' },\n        { id: 'user4', username: 'david' },\n        { id: 'user5', username: 'emma' }\n      ].filter(user => user.id !== currentUser?.id);\n      \n      return mockUsers;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  };\n\n  // Fonction simulée pour récupérer les messages\n  const fetchMessages = async (userId) => {\n    try {\n      setLoading(true);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Messages exemple\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 3600000);\n      const twoHoursAgo = new Date(now.getTime() - 7200000);\n      \n      const mockMessages = [\n        {\n          id: 'm1',\n          sender: userId,\n          receiver: currentUser?.id,\n          content: 'Salut ! Comment ça va ?',\n          timestamp: twoHoursAgo.toISOString(),\n          status: 'read',\n          reactions: []\n        },\n        {\n          id: 'm2',\n          sender: currentUser?.id,\n          receiver: userId,\n          content: 'Ça va bien, merci ! Et toi ?',\n          timestamp: oneHourAgo.toISOString(),\n          status: 'read',\n          reactions: [\n            { userId, reaction: '👍', timestamp: oneHourAgo.toISOString() }\n          ]\n        },\n        {\n          id: 'm3',\n          sender: userId,\n          receiver: currentUser?.id,\n          content: 'Très bien ! Tu travailles sur quoi en ce moment ?',\n          timestamp: now.toISOString(),\n          status: 'delivered',\n          reactions: []\n        }\n      ];\n      \n      setMessages(mockMessages);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      setLoading(false);\n    }\n  };\n\n  // Envoyer un message\n  const handleSendMessage = async (content) => {\n    if (!selectedUser || !currentUser) return;\n    \n    try {\n      const newMessage = {\n        id: `m${Date.now()}`,\n        sender: currentUser.id,\n        receiver: selectedUser.id,\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sent',\n        reactions: []\n      };\n      \n      // Ajouter le message localement\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Mettre à jour le statut (simulé)\n      setTimeout(() => {\n        setMessages(prevMessages => \n          prevMessages.map(msg => \n            msg.id === newMessage.id \n              ? { ...msg, status: 'delivered' } \n              : msg\n          )\n        );\n      }, 1000);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  // Ajouter une réaction\n  const handleAddReaction = async (messageId, reaction) => {\n    try {\n      // Mettre à jour localement\n      setMessages(prevMessages => \n        prevMessages.map(msg => \n          msg.id === messageId \n            ? { \n                ...msg, \n                reactions: [...(msg.reactions || []), { userId: currentUser?.id, reaction }] \n              } \n            : msg\n        )\n      );\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 200));\n    } catch (error) {\n      console.error('Error adding reaction:', error);\n    }\n  };\n\n  // Répondre à un message\n  const handleReplyToMessage = async (messageId, content) => {\n    try {\n      if (!currentUser || !selectedUser) return;\n      \n      const parentMessage = messages.find(msg => msg.id === messageId);\n      \n      if (!parentMessage) return;\n      \n      const reply = {\n        id: `m${Date.now()}`,\n        sender: currentUser.id,\n        receiver: selectedUser.id,\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sent',\n        parentId: messageId,\n        parentMessage: {\n          id: parentMessage.id,\n          content: parentMessage.content\n        }\n      };\n      \n      // Mettre à jour localement\n      setMessages(prevMessages => [...prevMessages, reply]);\n      \n      // Simuler un délai réseau\n      await new Promise(resolve => setTimeout(resolve, 300));\n    } catch (error) {\n      console.error('Error replying to message:', error);\n    }\n  };\n\n  return (\n    <ChatContext.Provider\n      value={{\n        onlineUsers,\n        fetchUsers,\n        selectedUser,\n        setSelectedUser,\n        messages,\n        loading,\n        handleSendMessage,\n        handleAddReaction,\n        handleReplyToMessage\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}