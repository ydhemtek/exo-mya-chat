{"ast":null,"code":"var _jsxFileName = \"/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Récupérer l'utilisateur à partir du localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      setCurrentUser(user);\n    }\n    setLoading(false);\n  }, []);\n  const registerUser = async (username, email, password) => {\n    try {\n      // Simuler une requête API\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Vérifier si l'utilisateur existe déjà dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const userExists = existingUsers.some(user => user.email === email || user.username === username);\n      if (userExists) {\n        throw new Error('Un utilisateur avec cet email ou ce nom d\\'utilisateur existe déjà.');\n      }\n\n      // Créer un nouvel utilisateur\n      const user = {\n        id: Date.now().toString(),\n        username,\n        email,\n        password,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n\n      // Ajouter l'utilisateur à la liste des utilisateurs\n      existingUsers.push(user);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n\n      // Stocker l'utilisateur courant sans le mot de passe\n      const userWithoutPassword = {\n        ...user\n      };\n      delete userWithoutPassword.password;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const loginUser = async (email, password) => {\n    try {\n      // Simuler une requête API\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Vérifier les identifiants dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const user = existingUsers.find(user => user.email === email && user.password === password);\n      if (!user) {\n        throw new Error('Email ou mot de passe incorrect.');\n      }\n\n      // Préparer l'utilisateur pour le stockage (sans mot de passe)\n      const userWithoutPassword = {\n        ...user\n      };\n      delete userWithoutPassword.password;\n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logoutUser = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      loading,\n      registerUser,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","user","JSON","parse","localStorage","getItem","registerUser","username","email","password","Promise","resolve","setTimeout","existingUsers","userExists","some","Error","id","Date","now","toString","token","push","setItem","stringify","userWithoutPassword","error","loginUser","find","logoutUser","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdycament/Bureau/app_message_symfony/chat-page/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Récupérer l'utilisateur à partir du localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      setCurrentUser(user);\n    }\n    setLoading(false);\n  }, []);\n\n  const registerUser = async (username, email, password) => {\n    try {\n      // Simuler une requête API\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Vérifier si l'utilisateur existe déjà dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const userExists = existingUsers.some(\n        user => user.email === email || user.username === username\n      );\n      \n      if (userExists) {\n        throw new Error('Un utilisateur avec cet email ou ce nom d\\'utilisateur existe déjà.');\n      }\n      \n      // Créer un nouvel utilisateur\n      const user = {\n        id: Date.now().toString(),\n        username,\n        email,\n        password,\n        token: 'fake-jwt-token-' + Date.now()\n      };\n      \n      // Ajouter l'utilisateur à la liste des utilisateurs\n      existingUsers.push(user);\n      localStorage.setItem('users', JSON.stringify(existingUsers));\n      \n      // Stocker l'utilisateur courant sans le mot de passe\n      const userWithoutPassword = { ...user };\n      delete userWithoutPassword.password;\n      \n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      \n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const loginUser = async (email, password) => {\n    try {\n      // Simuler une requête API\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Vérifier les identifiants dans localStorage\n      const existingUsers = JSON.parse(localStorage.getItem('users')) || [];\n      const user = existingUsers.find(user => user.email === email && user.password === password);\n      \n      if (!user) {\n        throw new Error('Email ou mot de passe incorrect.');\n      }\n      \n      // Préparer l'utilisateur pour le stockage (sans mot de passe)\n      const userWithoutPassword = { ...user };\n      delete userWithoutPassword.password;\n      \n      setCurrentUser(userWithoutPassword);\n      localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n      localStorage.setItem('token', user.token);\n      \n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logoutUser = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        loading,\n        registerUser,\n        loginUser,\n        logoutUser\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}